openapi: 3.0.0
info:
  title: test-task-blog-nestjs-postgres API
  description: "Documentation for endpoints "
  version: 1.0.0
servers:
  - url: http://localhost:3001
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Access токен в заголовке Authorization
    refreshTokenCookie:
      type: apiKey
      in: cookie
      name: refreshToken
      description: Refresh токен в HttpOnly cookie
  schemas:
    LoginDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email пользователя
          example: user@example.com
        password:
          type: string
          minLength: 6
          description: Пароль
          example: "12345678"
        fingerprint:
          type: string
          minLength: 1
          description: Отпечаток браузера или устройства
          example: a1b2c3d4e5
      required:
        - email
        - password
        - fingerprint
      additionalProperties: false
    LogoutResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Сообщение об успешном выходе
          example: Logged out successfully
      required:
        - message
      additionalProperties: false
    AccessTokenResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT Access токен
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - accessToken
      additionalProperties: false
    RegisterDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email пользователя
          example: ivan@example.com
        password:
          type: string
          minLength: 6
          description: Пароль
          example: secret123
        firstName:
          type: string
          minLength: 1
          description: Имя
          example: Иван
        lastName:
          type: string
          minLength: 1
          description: Фамилия
          example: Петров
        phone:
          type: string
          minLength: 5
          description: Номер телефона
          example: "+79998887766"
        birthDate:
          type: string
          nullable: true
          description: Дата рождения
          example: 2000-01-01T00:00:00.000Z
        about:
          type: string
          maxLength: 500
          description: О себе
          example: React frontend developer
      required:
        - email
        - password
        - firstName
        - lastName
      additionalProperties: false
    RefreshTokenDto:
      type: object
      properties:
        fingerprint:
          type: string
          description: Уникальный отпечаток устройства
          example: device-abc-123
      required:
        - fingerprint
      additionalProperties: false
    CreateUserDto:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email пользователя
          example: user@example.com
        password:
          type: string
          minLength: 6
          description: Пароль
          example: qwerty123
        firstName:
          type: string
          description: Имя
          example: Иван
        lastName:
          type: string
          description: Фамилия
          example: Петров
        phone:
          type: string
          description: Телефон
          example: "+79991112233"
        birthDate:
          type: string
          nullable: true
          description: Дата рождения
          example: 1990-01-01T00:00:00.000Z
        about:
          type: string
          description: О себе
          example: Frontend разработчик
      required:
        - email
        - password
        - firstName
        - lastName
      additionalProperties: false
    UpdateUserDto:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 100
          description: Имя пользователя
          example: Иван
        lastName:
          type: string
          minLength: 1
          maxLength: 100
          description: Фамилия пользователя
          example: Петров
        phone:
          type: string
          maxLength: 100
          description: Номер телефона
          example: "+79998887766"
        birthDate:
          type: string
          nullable: true
          description: Дата рождения
          example: 2000-01-01T00:00:00.000Z
        email:
          type: string
          format: email
          description: Email
          example: ivan@example.com
        about:
          type: string
          maxLength: 1000
          description: О себе
          example: Frontend developer
      additionalProperties: false
    UserResponseDto:
      type: object
      properties:
        id:
          type: number
          description: ID пользователя
          example: 1
        email:
          type: string
          format: email
          description: Email
          example: user@example.com
        firstName:
          type: string
          description: Имя
          example: Иван
        lastName:
          type: string
          description: Фамилия
          example: Петров
        phone:
          type: string
          nullable: true
          description: Номер телефона
          example: "+79991112233"
        birthDate:
          type: string
          nullable: true
          description: Дата рождения
          example: 2000-01-01T00:00:00.000Z
        about:
          type: string
          nullable: true
          description: О себе
          example: Frontend разработчик
        avatar:
          type: string
          nullable: true
          description: Имя файла аватара
          example: avatar123.png
      required:
        - id
        - email
        - firstName
        - lastName
        - phone
        - birthDate
        - about
        - avatar
      additionalProperties: false
    CreatePostDto:
      type: object
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 10000
          description: Текст поста
          example: Привет, это мой первый пост!
      required:
        - text
      additionalProperties: false
    UpdatePostDto:
      type: object
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 10000
          description: Обновлённый текст поста
          example: Теперь я обновил этот пост!
        deleteImageIds:
          type: array
          items:
            type: number
            nullable: true
          description: Массив ID изображений, которые нужно удалить
          example:
            - 1
            - 2
            - 3
      additionalProperties: false
    PostResponseDto:
      type: object
      properties:
        id:
          type: number
          description: ID поста
          example: 42
        text:
          type: string
          description: Текст поста
          example: Содержимое поста
        createdAt:
          type: string
          nullable: true
          description: Дата создания
          example: 2024-01-01T00:00:00.000Z
        updatedAt:
          type: string
          nullable: true
          description: Дата последнего обновления
          example: 2024-01-01T00:00:00.000Z
        images:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              filename:
                type: string
            required:
              - id
              - filename
          description: Массив изображений поста
      required:
        - id
        - text
        - createdAt
        - updatedAt
        - images
      additionalProperties: false
    PostsResponseDto:
      type: array
      items:
        type: object
        properties:
          id:
            type: number
          text:
            type: string
          createdAt:
            type: string
            nullable: true
          updatedAt:
            type: string
            nullable: true
          images:
            type: array
            items:
              type: object
              properties:
                id:
                  type: number
                filename:
                  type: string
              required:
                - id
                - filename
        required:
          - id
          - text
          - createdAt
          - updatedAt
          - images
        additionalProperties: false
    PostIdParamDto:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
          exclusiveMinimum: true
          description: ID поста
          example: 42
      required:
        - id
      additionalProperties: false
    GetUserPostsQueryDto:
      type: object
      properties:
        limit:
          type: integer
          minimum: 1
          maximum: 100
          description: Максимальное количество постов для получения
          example: 10
        offset:
          type: integer
          nullable: true
          minimum: 0
          description: Смещение для пагинации
          example: 0
        sort:
          type: string
          enum:
            - ASC
            - DESC
          description: Сортировка по дате создания
          example: DESC
      required:
        - limit
        - offset
        - sort
      additionalProperties: false
  parameters: {}
paths:
  /auth/register:
    post:
      summary: Регистрация нового пользователя
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDto"
      responses:
        "201":
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        "400":
          description: Невалидные данные
        "409":
          description: Пользователь с таким email уже существует
  /auth/login:
    post:
      summary: Аутентификация пользователя
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "200":
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenResponseDto"
        "400":
          description: Невалидные данные
        "401":
          description: Неверный email или пароль
  /auth/logout:
    post:
      summary: Выход пользователя и удаление refresh токена
      description: Нужно передать `refreshToken` в cookie
      tags:
        - Auth
      responses:
        "200":
          description: Успешный выход
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponseDto"
        "401":
          description: Отсутствует или невалиден refresh токен
  /auth/refresh:
    post:
      summary: Обновить access и refresh токен
      description: Нужно передать `refreshToken` в cookie
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenDto"
      responses:
        "200":
          description: Обновлённый access токен. Новый refresh токен записан в cookie.
          headers:
            Set-Cookie:
              description: Устанавливает новый refresh токен (httpOnly, secure)
              schema:
                type: string
                example: refreshToken=abc123; HttpOnly; Secure; SameSite=Strict; Expires=Sat, 04
                  May 2025 10:00:00 GMT; Path=/
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessTokenResponseDto"
        "400":
          description: Невалидные данные
        "401":
          description: Отсутствует или невалиден refresh токен
  /profile:
    get:
      summary: Получить профиль текущего пользователя
      tags:
        - Profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        "401":
          description: Пользователь не авторизован (access token не передан или
            недействителен)
    patch:
      summary: Обновить профиль текущего пользователя
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        "200":
          description: Профиль обновлён
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        "400":
          description: Невалидные данные
        "401":
          description: Пользователь не авторизован (access token не передан или
            недействителен)
  /profile/upload-avatar:
    post:
      summary: Загрузить новый аватар пользователя
      tags:
        - Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: PNG или JPEG изображение. Макс. размер — 5MB
              required:
                - file
      responses:
        "200":
          description: Профиль с обновлённым аватаром
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        "400":
          description: Невалидные данные
        "401":
          description: Пользователь не авторизован (access token не передан или
            недействителен)
  /posts/create-post:
    post:
      summary: Создать новый пост
      tags:
        - Posts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: Текст поста
                  example: Мой пост!
                file:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: До 10 файлов PNG или JPEG, каждый не более 5MB. Все файлы
                    передаются в отдельных полях с именем "file".
              required:
                - text
      responses:
        "201":
          description: Созданный пост
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponseDto"
        "400":
          description: Невалидные данные
        "401":
          description: Пользователь не авторизован (access token не передан или
            недействителен)
        "404":
          description: Пост не найден
  /posts/{id}:
    delete:
      summary: Удалить пост
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/PostIdParamDto/properties/id"
      responses:
        "204":
          description: Пост успешно удалён. Тело ответа отсутствует.
        "400":
          description: Невалидные данные
        "401":
          description: Пользователь не авторизован (access token не передан или
            недействителен)
        "403":
          description: "Доступ запрещён: пользователь не является владельцем поста"
        "404":
          description: Пост не найден
    patch:
      summary: Обновить пост
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/PostIdParamDto/properties/id"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: Обновлённый текст
                deleteImageIds:
                  type: string
                  example:
                    - 1
                    - 2
                  description: "Массив id изображений, которые нужно удалить. Каждый id вписывать
                    в отдельное поле deleteImageIds, на бэкенде он автоматически
                    соберется в массив чисел. Пример: [23, 56, 79]"
                file:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: До 10 файлов PNG или JPEG, каждый не более 5MB. Все файлы
                    передаются в отдельных полях с именем "file".
      responses:
        "200":
          description: Обновлённый пост
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostResponseDto"
        "400":
          description: Невалидные данные (Все поля пустые)
        "401":
          description: Пользователь не авторизован (access token не передан или
            недействителен)
        "403":
          description: "Доступ запрещён: пользователь не является владельцем поста"
        "404":
          description: Пост не найден
  /posts/get-user-posts:
    get:
      summary: Получить посты текущего пользователя
      tags:
        - Posts
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/GetUserPostsQueryDto/properties/limit"
        - name: offset
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/GetUserPostsQueryDto/properties/offset"
        - name: sort
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/GetUserPostsQueryDto/properties/sort"
      responses:
        "200":
          description: Список постов пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostsResponseDto"
        "401":
          description: Пользователь не авторизован (access token не передан или
            недействителен)
